---
alwaysApply: false
---
# UI/UX Patterns for Melodia

## Design System Principles

### Consistent Color Usage
Follow the Melodia color palette from [src/app/globals.css](mdc:src/app/globals.css):

```css
/* Melodia Design System Colors */
:root {
  --color-melodia-teal: #2DD4BF;
  --color-melodia-coral: #FF6B6B;
  --color-melodia-yellow: #FFE66D;
  --color-melodia-purple: #A8E6CF;
  --color-melodia-pink: #FFB3BA;
  --color-melodia-blue: #B3D9FF;
  --color-melodia-orange: #FFD93D;
  --color-melodia-green: #6BCF7F;
  --color-melodia-red: #FF6B6B;
  --color-melodia-gray: #6B7280;
  --color-melodia-dark: #1F2937;
  --color-melodia-light: #F9FAFB;
}
```

### Component Composition Pattern
```typescript
// Base component with consistent styling
interface BaseComponentProps {
  className?: string;
  children?: React.ReactNode;
  variant?: 'primary' | 'secondary' | 'outline';
  size?: 'sm' | 'md' | 'lg';
}

export const BaseComponent: React.FC<BaseComponentProps> = ({
  className = '',
  children,
  variant = 'primary',
  size = 'md',
  ...props
}) => {
  const baseClasses = 'transition-all duration-200 ease-in-out';
  const variantClasses = {
    primary: 'bg-melodia-teal text-white hover:bg-melodia-teal/90',
    secondary: 'bg-melodia-coral text-white hover:bg-melodia-coral/90',
    outline: 'border-2 border-melodia-teal text-melodia-teal hover:bg-melodia-teal hover:text-white'
  };
  const sizeClasses = {
    sm: 'px-3 py-1.5 text-sm',
    md: 'px-4 py-2 text-base',
    lg: 'px-6 py-3 text-lg'
  };

  return (
    <div
      className={`${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${className}`}
      {...props}
    >
      {children}
    </div>
  );
};
```

## Form Design Patterns

### Consistent Form Layout
```typescript
// Form container with consistent spacing and styling
export const FormContainer: React.FC<{
  children: React.ReactNode;
  onSubmit: (e: React.FormEvent) => void;
  className?: string;
}> = ({ children, onSubmit, className = '' }) => {
  return (
    <form
      onSubmit={onSubmit}
      className={`space-y-4 w-full max-w-md mx-auto ${className}`}
    >
      {children}
    </form>
  );
};

// Form field wrapper with consistent styling
export const FormField: React.FC<{
  label?: string;
  error?: string;
  children: React.ReactNode;
  required?: boolean;
}> = ({ label, error, children, required = false }) => {
  return (
    <div className="space-y-1">
      {label && (
        <label className="block text-sm font-medium text-melodia-teal">
          {label}
          {required && <span className="text-red-500 ml-1">*</span>}
        </label>
      )}
      {children}
      {error && (
        <p className="text-red-500 text-xs mt-1 text-left">{error}</p>
      )}
    </div>
  );
};

// Consistent input styling
export const MelodiaInput: React.FC<{
  type?: string;
  placeholder?: string;
  value: string;
  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
  error?: boolean;
  className?: string;
  required?: boolean;
}> = ({ type = 'text', placeholder, value, onChange, error = false, className = '', required = false }) => {
  return (
    <input
      type={type}
      placeholder={placeholder}
      value={value}
      onChange={onChange}
      required={required}
      className={`w-full bg-white border text-melodia-teal placeholder-melodia-teal/60 rounded-xl p-3 focus:ring-2 focus:ring-melodia-yellow focus:border-transparent transition ${
        error ? 'border-red-500' : 'border-melodia-teal/20'
      } ${className}`}
    />
  );
};
```

### Loading States Pattern
```typescript
// Consistent loading component
export const LoadingSpinner: React.FC<{
  size?: 'sm' | 'md' | 'lg';
  color?: string;
}> = ({ size = 'md', color = 'text-melodia-teal' }) => {
  const sizeClasses = {
    sm: 'w-4 h-4',
    md: 'w-6 h-6',
    lg: 'w-8 h-8'
  };

  return (
    <div className={`animate-spin ${sizeClasses[size]} ${color}`}>
      <svg className="w-full h-full" fill="none" viewBox="0 0 24 24">
        <circle
          className="opacity-25"
          cx="12"
          cy="12"
          r="10"
          stroke="currentColor"
          strokeWidth="4"
        />
        <path
          className="opacity-75"
          fill="currentColor"
          d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
        />
      </svg>
    </div>
  );
};

// Loading state wrapper
export const LoadingWrapper: React.FC<{
  loading: boolean;
  children: React.ReactNode;
  fallback?: React.ReactNode;
}> = ({ loading, children, fallback }) => {
  if (loading) {
    return (
      <div className="flex items-center justify-center p-8">
        {fallback || <LoadingSpinner />}
      </div>
    );
  }

  return <>{children}</>;
};
```

## Navigation Patterns

### Bottom Navigation Consistency
Follow the pattern from [src/components/BottomNavigation.tsx](mdc:src/components/BottomNavigation.tsx):

```typescript
// Consistent navigation item styling
export const NavigationItem: React.FC<{
  href: string;
  icon: string;
  label: string;
  isActive: boolean;
  onClick?: () => void;
}> = ({ href, icon, label, isActive, onClick }) => {
  return (
    <Link
      href={href}
      onClick={onClick}
      className={`bottom-nav-item ${isActive ? 'active' : ''}`}
    >
      <span className="text-xl">{icon}</span>
      <span className="text-xs font-medium">{label}</span>
    </Link>
  );
};

// Navigation container with consistent styling
export const BottomNavigation: React.FC<{
  items: NavigationItem[];
  currentPath: string;
}> = ({ items, currentPath }) => {
  return (
    <nav className="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 px-4 py-2">
      <div className="flex justify-around items-center max-w-md mx-auto">
        {items.map((item) => (
          <NavigationItem
            key={item.href}
            {...item}
            isActive={item.isActive || currentPath === item.href}
          />
        ))}
      </div>
    </nav>
  );
};
```

## Responsive Design Patterns

### Mobile-First Approach
```typescript
// Responsive container component
export const ResponsiveContainer: React.FC<{
  children: React.ReactNode;
  className?: string;
}> = ({ children, className = '' }) => {
  return (
    <div className={`w-full max-w-md mx-auto px-4 sm:px-6 lg:px-8 ${className}`}>
      {children}
    </div>
  );
};

// Responsive grid layout
export const ResponsiveGrid: React.FC<{
  children: React.ReactNode;
  cols?: {
    sm?: number;
    md?: number;
    lg?: number;
  };
  gap?: string;
}> = ({ children, cols = { sm: 1, md: 2, lg: 3 }, gap = 'gap-4' }) => {
  const gridCols = `grid-cols-${cols.sm} md:grid-cols-${cols.md} lg:grid-cols-${cols.lg}`;
  
  return (
    <div className={`grid ${gridCols} ${gap}`}>
      {children}
    </div>
  );
};
```

## Accessibility Patterns

### ARIA Labels and Semantic HTML
```typescript
// Accessible button component
export const AccessibleButton: React.FC<{
  children: React.ReactNode;
  onClick: () => void;
  disabled?: boolean;
  ariaLabel?: string;
  className?: string;
}> = ({ children, onClick, disabled = false, ariaLabel, className = '' }) => {
  return (
    <button
      onClick={onClick}
      disabled={disabled}
      aria-label={ariaLabel}
      className={`px-4 py-2 rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-melodia-yellow ${
        disabled 
          ? 'bg-gray-300 text-gray-500 cursor-not-allowed' 
          : 'bg-melodia-teal text-white hover:bg-melodia-teal/90'
      } ${className}`}
    >
      {children}
    </button>
  );
};

// Accessible form field
export const AccessibleFormField: React.FC<{
  id: string;
  label: string;
  error?: string;
  children: React.ReactNode;
  required?: boolean;
}> = ({ id, label, error, children, required = false }) => {
  return (
    <div className="space-y-1">
      <label
        htmlFor={id}
        className="block text-sm font-medium text-melodia-teal"
      >
        {label}
        {required && <span className="text-red-500 ml-1" aria-label="required">*</span>}
      </label>
      {children}
      {error && (
        <p
          id={`${id}-error`}
          className="text-red-500 text-xs mt-1 text-left"
          role="alert"
          aria-live="polite"
        >
          {error}
        </p>
      )}
    </div>
  );
};
```

## Animation and Transition Patterns

### Consistent Transitions
```css
/* Global transition classes */
.transition-smooth {
  transition: all 0.2s ease-in-out;
}

.transition-colors {
  transition: color 0.2s ease-in-out, background-color 0.2s ease-in-out, border-color 0.2s ease-in-out;
}

.transition-transform {
  transition: transform 0.2s ease-in-out;
}

/* Hover effects */
.hover-lift:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.hover-scale:hover {
  transform: scale(1.05);
}
```

### Loading Animations
```typescript
// Pulse animation for loading states
export const PulseLoader: React.FC<{
  className?: string;
}> = ({ className = '' }) => {
  return (
    <div className={`animate-pulse ${className}`}>
      <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
      <div className="h-4 bg-gray-200 rounded w-1/2"></div>
    </div>
  );
};

// Skeleton loader for content
export const SkeletonCard: React.FC = () => {
  return (
    <div className="bg-white rounded-xl p-4 shadow-sm border border-gray-100">
      <div className="animate-pulse">
        <div className="h-4 bg-gray-200 rounded w-3/4 mb-3"></div>
        <div className="h-3 bg-gray-200 rounded w-1/2 mb-2"></div>
        <div className="h-3 bg-gray-200 rounded w-2/3"></div>
      </div>
    </div>
  );
};
```

## Error Handling UI Patterns

### Error Boundary Component
```typescript
// Error boundary for graceful error handling
export class ErrorBoundary extends React.Component<
  { children: React.ReactNode; fallback?: React.ReactNode },
  { hasError: boolean; error?: Error }
> {
  constructor(props: any) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error) {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error('Error caught by boundary:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return this.props.fallback || (
        <div className="flex flex-col items-center justify-center p-8 text-center">
          <div className="text-6xl mb-4">😵</div>
          <h2 className="text-xl font-semibold text-melodia-teal mb-2">
            Something went wrong
          </h2>
          <p className="text-gray-600 mb-4">
            We're sorry, but something unexpected happened.
          </p>
          <button
            onClick={() => window.location.reload()}
            className="px-4 py-2 bg-melodia-teal text-white rounded-lg hover:bg-melodia-teal/90 transition-colors"
          >
            Try Again
          </button>
        </div>
      );
    }

    return this.props.children;
  }
}
```

### Error Display Components
```typescript
// Consistent error message display
export const ErrorMessage: React.FC<{
  message: string;
  onRetry?: () => void;
  className?: string;
}> = ({ message, onRetry, className = '' }) => {
  return (
    <div className={`bg-red-50 border border-red-200 rounded-lg p-4 ${className}`}>
      <div className="flex items-start">
        <div className="text-red-500 text-xl mr-3">⚠️</div>
        <div className="flex-1">
          <p className="text-red-800 text-sm">{message}</p>
          {onRetry && (
            <button
              onClick={onRetry}
              className="mt-2 text-red-600 text-sm underline hover:text-red-800"
            >
              Try again
            </button>
          )}
        </div>
      </div>
    </div>
  );
};

// Success message display
export const SuccessMessage: React.FC<{
  message: string;
  className?: string;
}> = ({ message, className = '' }) => {
  return (
    <div className={`bg-green-50 border border-green-200 rounded-lg p-4 ${className}`}>
      <div className="flex items-center">
        <div className="text-green-500 text-xl mr-3">✅</div>
        <p className="text-green-800 text-sm">{message}</p>
      </div>
    </div>
  );
};
```

## Performance Optimization Patterns

### Lazy Loading Components
```typescript
// Lazy load heavy components
export const LazySongPlayer = React.lazy(() => import('./SongPlayer'));

// Suspense wrapper for lazy components
export const LazyComponentWrapper: React.FC<{
  children: React.ReactNode;
  fallback?: React.ReactNode;
}> = ({ children, fallback }) => {
  return (
    <React.Suspense fallback={fallback || <LoadingSpinner />}>
      {children}
    </React.Suspense>
  );
};
```

### Memoization for Performance
```typescript
// Memoized list item component
export const MemoizedSongItem = React.memo<{
  song: Song;
  onPlay: (song: Song) => void;
  onDelete: (songId: string) => void;
}>(({ song, onPlay, onDelete }) => {
  const handlePlay = useCallback(() => {
    onPlay(song);
  }, [song, onPlay]);

  const handleDelete = useCallback(() => {
    onDelete(song.id);
  }, [song.id, onDelete]);

  return (
    <div className="bg-white rounded-lg p-4 shadow-sm border border-gray-100">
      <h3 className="font-semibold text-melodia-teal">{song.title}</h3>
      <p className="text-gray-600 text-sm">{song.artist}</p>
      <div className="flex gap-2 mt-3">
        <button
          onClick={handlePlay}
          className="px-3 py-1 bg-melodia-coral text-white rounded text-sm hover:bg-melodia-coral/90"
        >
          Play
        </button>
        <button
          onClick={handleDelete}
          className="px-3 py-1 bg-red-500 text-white rounded text-sm hover:bg-red-600"
        >
          Delete
        </button>
      </div>
    </div>
  );
});
```