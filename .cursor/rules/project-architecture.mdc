---
alwaysApply: false
description: This is  Melodia Website Architecture Guide
---


# Melodia Website Architecture Guide

## Project Structure Overview

The Melodia website is built with Next.js 14 using the App Router pattern. The main source code is organized in the [src/](mdc:src/) directory with the following structure:

### Core Directories
- **`src/app/`** - Next.js App Router pages and API routes
- **`src/components/`** - Reusable UI components
- **`src/lib/`** - Business logic, utilities, and services
- **`src/types/`** - TypeScript type definitions
- **`src/hooks/`** - Custom React hooks

### Key Files and Their Relationships

#### Database & Types
- [src/types/index.ts](mdc:src/types/index.ts) - Main type definitions (Song, PublicSong, LyricLine)
- [src/lib/supabase.ts](mdc:src/lib/supabase.ts) - Database client and type definitions
- [init.sql](mdc:init.sql) - Database schema and initial setup

#### Business Logic
- [src/lib/actions.ts](mdc:src/lib/actions.ts) - Server actions for all database operations (1098 lines)
- [src/lib/suno-api.ts](mdc:src/lib/suno-api.ts) - Suno AI integration for song generation
- [src/lib/constants.ts](mdc:src/lib/constants.ts) - App constants and sample song data
- [src/lib/utils.ts](mdc:src/lib/utils.ts) - Utility functions
- [src/lib/analytics.ts](mdc:src/lib/analytics.ts) - Analytics tracking

#### Core Components
- [src/components/MediaPlayer.tsx](mdc:src/components/MediaPlayer.tsx) - Main audio player with lyrics sync
- [src/components/FullPageMediaPlayer.tsx](mdc:src/components/FullPageMediaPlayer.tsx) - Full-screen media player
- [src/components/SongList.tsx](mdc:src/components/SongList.tsx) - Song listing component
- [src/components/song-details.tsx](mdc:src/components/song-details.tsx) - Individual song display

#### Pages & Routes
- [src/app/layout.tsx](mdc:src/app/layout.tsx) - Root layout with metadata and global providers
- [src/app/page.tsx](mdc:src/app/page.tsx) - Homepage with song showcase
- [src/app/library/page.tsx](mdc:src/app/library/page.tsx) - Song library page
- [src/app/song-admin-portal/](mdc:src/app/song-admin-portal/) - Admin interface

#### Custom Hooks
- [src/hooks/use-song.ts](mdc:src/hooks/use-song.ts) - Individual song data management
- [src/hooks/use-songs.ts](mdc:src/hooks/use-songs.ts) - Song list management (currently commented out)
- [src/hooks/use-toast.ts](mdc:src/hooks/use-toast.ts) - Toast notifications

## Data Flow Architecture

### Database Layer
```typescript
PostgreSQL (Supabase) → Song interface → PublicSong interface
```

### API Layer
```typescript
Server Actions (src/lib/actions.ts) → Database → TypeScript interfaces
```

### Component Layer
```typescript
Page Components → UI Components → Custom Hooks → Server Actions
```

## Technology Stack
- **Frontend**: Next.js 14, React, TypeScript, Tailwind CSS
- **Backend**: Supabase (PostgreSQL), Server Actions
- **AI Integration**: Suno AI for song generation
- **Analytics**: Google Analytics integration

## Development Patterns
- Use Server Components for SEO and performance
- Use Client Components for interactivity
- Implement Server Actions for form handling and API calls
- Maintain end-to-end TypeScript type safety
- Follow the existing component structure and naming conventions
# Melodia Website Architecture Guide

## Project Structure Overview

The Melodia website is built with Next.js 14 using the App Router pattern. The main source code is organized in the [src/](mdc:src/) directory with the following structure:

### Core Directories
- **`src/app/`** - Next.js App Router pages and API routes
- **`src/components/`** - Reusable UI components
- **`src/lib/`** - Business logic, utilities, and services
- **`src/types/`** - TypeScript type definitions
- **`src/hooks/`** - Custom React hooks

### Key Files and Their Relationships

#### Database & Types
- [src/types/index.ts](mdc:src/types/index.ts) - Main type definitions (Song, PublicSong, LyricLine)
- [src/lib/supabase.ts](mdc:src/lib/supabase.ts) - Database client and type definitions
- [init.sql](mdc:init.sql) - Database schema and initial setup

#### Business Logic
- [src/lib/actions.ts](mdc:src/lib/actions.ts) - Server actions for all database operations (1098 lines)
- [src/lib/suno-api.ts](mdc:src/lib/suno-api.ts) - Suno AI integration for song generation
- [src/lib/constants.ts](mdc:src/lib/constants.ts) - App constants and sample song data
- [src/lib/utils.ts](mdc:src/lib/utils.ts) - Utility functions
- [src/lib/analytics.ts](mdc:src/lib/analytics.ts) - Analytics tracking

#### Core Components
- [src/components/MediaPlayer.tsx](mdc:src/components/MediaPlayer.tsx) - Main audio player with lyrics sync
- [src/components/FullPageMediaPlayer.tsx](mdc:src/components/FullPageMediaPlayer.tsx) - Full-screen media player
- [src/components/SongList.tsx](mdc:src/components/SongList.tsx) - Song listing component
- [src/components/song-details.tsx](mdc:src/components/song-details.tsx) - Individual song display

#### Pages & Routes
- [src/app/layout.tsx](mdc:src/app/layout.tsx) - Root layout with metadata and global providers
- [src/app/page.tsx](mdc:src/app/page.tsx) - Homepage with song showcase
- [src/app/library/page.tsx](mdc:src/app/library/page.tsx) - Song library page
- [src/app/song-admin-portal/](mdc:src/app/song-admin-portal/) - Admin interface

#### Custom Hooks
- [src/hooks/use-song.ts](mdc:src/hooks/use-song.ts) - Individual song data management
- [src/hooks/use-songs.ts](mdc:src/hooks/use-songs.ts) - Song list management (currently commented out)
- [src/hooks/use-toast.ts](mdc:src/hooks/use-toast.ts) - Toast notifications

## Data Flow Architecture

### Database Layer
```typescript
PostgreSQL (Supabase) → Song interface → PublicSong interface
```

### API Layer
```typescript
Server Actions (src/lib/actions.ts) → Database → TypeScript interfaces
```

### Component Layer
```typescript
Page Components → UI Components → Custom Hooks → Server Actions
```

## Technology Stack
- **Frontend**: Next.js 14, React, TypeScript, Tailwind CSS
- **Backend**: Supabase (PostgreSQL), Server Actions
- **AI Integration**: Suno AI for song generation
- **Analytics**: Google Analytics integration

## Development Patterns
- Use Server Components for SEO and performance
- Use Client Components for interactivity
- Implement Server Actions for form handling and API calls
- Maintain end-to-end TypeScript type safety
- Follow the existing component structure and naming conventions
